using SharedMethods;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace UsersAndAssetsV2
{
    /// <summary>
    /// Represents the form used for entering or editing YubiKey data.
    /// </summary>
    public partial class FormYubiKeysEntry : Form
    {
        private readonly int AssetID;
        private readonly int DepartmentID;
        private readonly bool IsEdit;           // Indicates if the form is in edit mode
        private readonly string PublicId;       // The ID generated by the YubiKey configuration software
        private readonly string SerialNumber;   // The YubiKey serial number
        private readonly SqlConnection SqlConn; // SQL connection used for database operations
        private readonly int YubiKeyId;         // The record number from the YubiKey database

        /// <summary>
        /// Initializes a new instance of the <see cref="FormYubiKeysEntry"/> class for creating a new YubiKey record.
        /// </summary>
        /// <param name="sqlConn">The SQL connection to be used for database operations.</param>
        public FormYubiKeysEntry(SqlConnection sqlConn)
        {
            InitializeComponent();

            IsEdit = false;
            PublicId = string.Empty;
            SerialNumber = string.Empty;
            SqlConn = sqlConn;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormYubiKeysEntry"/> class for editing an existing YubiKey record.
        /// </summary>
        /// <param name="row">The <see cref="DataRow"/> containing the YubiKey data to be edited.</param>
        /// <param name="sqlConn">The SQL connection to be used for database operations.</param>
        public FormYubiKeysEntry(DataRow row, SqlConnection sqlConn)
        {
            InitializeComponent();

            AssetID = (int)row.Field<object>("AssetID");
            DepartmentID = (int)row.Field<object>("DeptID");
            IsEdit = true;
            PublicId = row.Field<object>("PublicID").ToString();
            SerialNumber = row.Field<object>("Serial").ToString();
            SqlConn = sqlConn;
            YubiKeyId = (int)row.Field<object>("ID");
        }

        /// <summary>
        /// Handles the form load event. Sets the form's icon, position, and populates the asset and department dropdowns.
        /// If the form is in edit mode, it populates the fields with existing data.
        /// </summary>
        private void FormYubiKeysEntry_Load(object sender, EventArgs e)
        {
            this.Icon = System.Drawing.Icon.ExtractAssociatedIcon(Application.ExecutablePath);
            this.StartPosition = FormStartPosition.CenterParent;

            PopulateCboAssetType();
            PopulateCboDepartment();

            if (IsEdit) PopulateFormFields();
        }

        #region Hide the closing 'X'

        /// <summary>
        /// Overrides the form's creation parameters to disable the close button (the 'X' button).
        /// </summary>
        private const int CP_NOCLOSE_BUTTON = 0x200;
        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams myCp = base.CreateParams;
                myCp.ClassStyle |= CP_NOCLOSE_BUTTON;
                return myCp;
            }
        }

        #endregion

        /// <summary>
        /// Handles the click event of the Cancel button, closing the form without saving.
        /// </summary>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close(); // Close the form
        }

        /// <summary>
        /// Handles the click event of the Save button. Validates the form data and saves the YubiKey record to the database.
        /// </summary>
        private void btnSave_Click(object sender, EventArgs e)
        {
            bool validForm = VerifyFormData();
            if (validForm)
            {
                SaveYubiKeyRecord();

                this.DialogResult = DialogResult.OK;
                this.Close(); // Close the form
            }
            else
            {
                MessageBox.Show("Please enter the required items."); // Show validation message
            }
        }

        /// <summary>
        /// Handles the dropdown event of the Department combo box, resetting the selected index to allow a new selection.
        /// </summary>
        private void cboDepartment_DropDown(object sender, EventArgs e)
        {
            cboDepartment.SelectedIndex = -1;
        }

        #region General Methods

        /// <summary>
        /// Populates the Asset Type combo box with YubiKey-related asset types from the database.
        /// </summary>
        private void PopulateCboAssetType()
        {
            string query = "SELECT [ID], [Description] FROM [AssetType] WHERE [Description] LIKE 'YubiKey%' ORDER BY [Description];";
            PopulateComboBox(cboAssetType, query, "ID", "Description");
        }

        /// <summary>
        /// Populates the Department combo box with department names from the database.
        /// </summary>
        private void PopulateCboDepartment()
        {
            string query = "SELECT [ID], [Name] FROM [Department] ORDER BY [Name];";
            PopulateComboBox(cboDepartment, query, "ID", "Name");
        }

        /// <summary>
        /// Populates a combo box using a database query and specified value/display fields.
        /// </summary>
        /// <param name="comboBox">The combo box to populate.</param>
        /// <param name="query">The SQL query to execute.</param>
        /// <param name="valueItem">The name of the column to use as the value for the combo box items.</param>
        /// <param name="displayItem">The name of the column to display in the combo box items.</param>
        private void PopulateComboBox(ComboBox comboBox, string query, string valueItem, string displayItem)
        {
            comboBox.Items.Clear();
            DatabaseMethods.PopulateComboBoxUsingObjectFields(comboBox, query, valueItem, displayItem, SqlConn);
            comboBox.SelectedIndex = -1;
        }

        /// <summary>
        /// Populates the form fields with data for editing an existing YubiKey record.
        /// </summary>
        private void PopulateFormFields()
        {
            cboDepartment.SelectedValue = DepartmentID.ToString();
            cboAssetType.SelectedValue = AssetID.ToString();
            txtPublicId.Text = PublicId.Trim();
            txtSerialNumber.Text = SerialNumber.Trim();
        }

        /// <summary>
        /// Saves the YubiKey record to the database. It either inserts a new record or updates an existing one based on the form's mode (edit or new).
        /// </summary>
        private void SaveYubiKeyRecord()
        {
            // Extract the form values
            int assetTypeId = Convert.ToInt32(cboAssetType.SelectedValue);
            int departmentId = Convert.ToInt32(cboDepartment.SelectedValue);
            string publicId = txtPublicId.Text.Trim();
            string serialNumber = txtSerialNumber.Text.Trim();

            // Define the SQL query based on whether it's an update or insert
            string query;
            if (IsEdit)
            {
                query = @"
                    UPDATE [YubiKey] 
                    SET [SerialNumber] = @SerialNumber,
                        [PublicID] = @PublicID,
                        [AssetType_ID] = @AssetTypeID,
                        [Department_ID] = @DepartmentID
                    WHERE [ID] = @YubiKeyID;";
            }
            else
            {
                query = @"
                    INSERT INTO [YubiKey] 
                        ([SerialNumber], [PublicID], [AssetType_ID], [Department_ID])
                    VALUES 
                        (@SerialNumber, @PublicID, @AssetTypeID, @DepartmentID);";
            }

            try
            {
                DatabaseMethods.CheckSqlConnectionState(SqlConn);

                // Execute the SQL query with parameters
                ExecuteNonQuery(query, command =>
                {
                    command.Parameters.AddWithValue("@AssetTypeID", assetTypeId);
                    command.Parameters.AddWithValue("@DepartmentID", departmentId);
                    command.Parameters.AddWithValue("@PublicID", publicId);
                    command.Parameters.AddWithValue("@SerialNumber", serialNumber);
                    if (IsEdit) command.Parameters.AddWithValue("@YubiKeyID", YubiKeyId);
                });
            }
            catch (SqlException ex)
            {
                CommonMethods.DisplayError($"An error occurred while saving the record: {ex.Message}", "Database Error");
            }
            finally
            {
                SqlConn?.Close();
            }
        }

        /// <summary>
        /// Executes a SQL query with parameters, managing the SQL connection automatically.
        /// </summary>
        /// <param name="query">The SQL query to execute.</param>
        /// <param name="setParameters">An action that adds the necessary SQL parameters to the command.</param>
        private void ExecuteNonQuery(string query, Action<SqlCommand> setParameters)
        {
            using (SqlCommand command = new SqlCommand(query, SqlConn))
            {
                setParameters(command);
                SqlConn.Open();
                command.ExecuteNonQuery();
                SqlConn.Close();
            }
        }

        /// <summary>
        /// Verifies that the form data is valid before saving. Checks if all required fields are filled.
        /// </summary>
        /// <returns>Returns <c>true</c> if the form data is valid; otherwise, <c>false</c>.</returns>
        private bool VerifyFormData()
        {
            // Check for missing fields and provide feedback in one message
            string errorMessage = "";

            if (cboAssetType.SelectedIndex == -1)
            {
                errorMessage += "Please select a valid Asset Type.\n";
                cboAssetType.Focus();
            }

            if (cboDepartment.SelectedIndex == -1)
            {
                errorMessage += "Please select a valid Department.\n";
                cboDepartment.Focus();
            }

            if (string.IsNullOrWhiteSpace(txtPublicId.Text))
            {
                errorMessage += "Please enter the Public ID.\n";
                txtPublicId.Focus();
            }

            if (string.IsNullOrWhiteSpace(txtSerialNumber.Text))
            {
                errorMessage += "Please enter the Serial Number.\n";
                txtSerialNumber.Focus();
            }

            if (!string.IsNullOrEmpty(errorMessage))
            {
                MessageBox.Show(errorMessage, "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            return true;
        }

        #endregion
    }
}
