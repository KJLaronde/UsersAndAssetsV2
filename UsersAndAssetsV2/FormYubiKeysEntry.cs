using SharedMethods;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace UsersAndAssetsV2
{
    /// <summary>
    /// Represents the form used for entering or editing YubiKey data.
    /// </summary>
    public partial class FormYubiKeysEntry : Form
    {
        private readonly string AssetType;
        private readonly string DepartmentName; // The name of the department the device is assigned to
        private readonly bool IsEdit;           // Indicates if the form is in edit mode
        private readonly string PublicId;       // The ID generated by the YubiKey configuration software
        private readonly string SerialNumber;   // The YubiKey serial number
        private readonly SqlConnection SqlConn; // SQL connection used for database operations
        private readonly int YubiKeyId;         // The record number from the YubiKey database

        public FormYubiKeysEntry(SqlConnection sqlConn)
        {
            SqlConn = sqlConn;

            InitializeComponent();

            // Set the form's start position to be centered relative to its parent
            this.StartPosition = FormStartPosition.CenterParent; 
            
            IsEdit = false;
        }

        public FormYubiKeysEntry(DataRow row, SqlConnection sqlConn)
        {
            SqlConn = sqlConn;

            InitializeComponent();

            // Set the form's start position to be centered relative to its parent
            this.StartPosition = FormStartPosition.CenterParent;

            AssetType = row.Field<object>("Type").ToString();
            DepartmentName = row.Field<object>("Department").ToString();
            IsEdit = true;
            PublicId = row.Field<object>("PublicID").ToString();
            SerialNumber = row.Field<object>("Serial").ToString();
            YubiKeyId = (int)row.Field<object>("ID");
            
            PopulateFormFields();
        }

        private void FormYubiKeysEntry_Load(object sender, EventArgs e)
        {
            this.Icon = System.Drawing.Icon.ExtractAssociatedIcon(Application.ExecutablePath);

            PopulateCboAssetType();
            PopulateCboDepartment();
        }

        #region Hide the closing 'X'

        private const int CP_NOCLOSE_BUTTON = 0x200;
        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams myCp = base.CreateParams;
                myCp.ClassStyle |= CP_NOCLOSE_BUTTON;
                return myCp;
            }
        }

        #endregion

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close(); // Close the form
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            bool validForm = VerifyFormData();
            if (validForm)
            {
                if (IsEdit)
                {
                    UpdateRecord(); // Update the record in the database
                }
                else
                {
                    WriteRecord(); // Save the record to the database
                }

                this.DialogResult = DialogResult.OK;
                this.Close(); // Close the form
            }
            else
            {
                MessageBox.Show("Please enter the required items."); // Show validation message
            }
        }

        private void cboDepartment_DropDown(object sender, EventArgs e)
        {
            cboDepartment.SelectedIndex = -1;
        }

        #region General Methods

        private void PopulateCboAssetType()
        {
            string displayItem = "Description";
            string valueItem = "ID";
            string query = "SELECT [ID], [Description] FROM [AssetType] WHERE [Description] LIKE 'YubiKey%' ORDER BY [Description];";

            PopulateComboBox(cboAssetType, query, valueItem, displayItem);
        }
        
        private void PopulateCboDepartment() 
        {
            string displayItem = "Name";
            string valueItem = "ID";
            string query = "SELECT [ID], [Name] FROM [Department] ORDER BY [Name];";

            PopulateComboBox(cboDepartment, query, valueItem, displayItem);
        }

        private void PopulateComboBox(ComboBox comboBox, string query, string valueItem, string displayItem)
        {
            comboBox.Items.Clear();
            DatabaseMethods.PopulateComboBoxUsingObjectFields(comboBox, query, valueItem, displayItem, SqlConn);
            comboBox.SelectedIndex = -1;
        }

        private void PopulateFormFields() 
        {
            string deptQuery = "SELECT [ID] FROM [Department] WHERE [Name] = @DepartmentName;";
            using (SqlCommand command = new SqlCommand(deptQuery, SqlConn))
            {
                command.Parameters.AddWithValue("@DepartmentName", DepartmentName);
                DataTable deptTable = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                adapter.Fill(deptTable);
                cboDepartment.SelectedValue = deptTable.Rows[0]["ID"].ToString();
            }

            string typeQuery = "SELECT [ID] FROM [AssetType] WHERE [Description] = @AssetType;";
            using (SqlCommand command = new SqlCommand(typeQuery, SqlConn))
            {
                command.Parameters.AddWithValue("@AssetType", AssetType);
                DataTable typeTable = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                adapter.Fill(typeTable);
                cboAssetType.SelectedValue = typeTable.Rows[0]["ID"].ToString();
            }

            txtPublicId.Text = PublicId.Trim();
            txtSerialNumber.Text = SerialNumber.Trim();
        }

        private void UpdateRecord()
        {
            int assetTypeId = (int)cboAssetType.SelectedValue;
            int departmentId = (int)cboDepartment.SelectedValue;
            string publicId = txtPublicId.Text;
            string serialNumber = txtSerialNumber.Text;
            string keyQuery = @"
                UPDATE [YubiKey] 
                SET [SerialNumber] = @SerialNumber
                  , [PublicID] = @PublicID
                  , [AssetType_ID] = @AssetTypeID
                  , [Department_ID] = @DepartmentID
                WHERE [ID] = @YubiKeyID;";

            try
            {
                SqlConn.Open();

                // Update the database record
                using (SqlCommand command = new SqlCommand(keyQuery, SqlConn))
                {
                    command.Parameters.AddWithValue("@AssetTypeID", assetTypeId);
                    command.Parameters.AddWithValue("@DepartmentID", departmentId);
                    command.Parameters.AddWithValue("@PublicId", publicId);
                    command.Parameters.AddWithValue("@SerialNumber", serialNumber);
                    command.Parameters.AddWithValue("@YubiKeyID", YubiKeyId);
                    command.ExecuteNonQuery();
                }
            }
            catch (SqlException ex)
            {
                CommonMethods.DisplayError($"An error occurred while updating the record: {ex.Message}", "Database Error");
            }
            finally
            {
                SqlConn.Close();
            }
        }

        private bool VerifyFormData()
        {
            // Ensure that the asset type is selected
            if (cboAssetType.SelectedIndex == -1)
            {
                MessageBox.Show("Please select a valid Asset Type.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            // Ensure that the department is selected
            if (cboDepartment.SelectedIndex == -1)
            {
                MessageBox.Show("Please select a valid Department.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            // Ensure that the Public ID is entered
            if (string.IsNullOrWhiteSpace(txtPublicId.Text))
            {
                MessageBox.Show("Please enter the Public ID.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            // Ensure that the Serial Number is entered
            if (string.IsNullOrWhiteSpace(txtSerialNumber.Text))
            {
                MessageBox.Show("Please enter the Serial Number.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            // If all validations pass, return true
            return true;
        }

        private void WriteRecord() 
        {
            int assetTypeId = (int)cboAssetType.SelectedValue;
            int departmentId = (int)cboDepartment.SelectedValue;
            string publicId = txtPublicId.Text;
            string serialNumber = txtSerialNumber.Text;
            string query = @"
                INSERT INTO [dbo].[YubiKey]
                    ([SerialNumber]
                    ,[PublicID]
                    ,[AssetType_ID]
                    ,[Department_ID])
                VALUES 
                    (@SerialNumber
                    ,@PublicId
                    ,@AssetTypeId
                    ,@DepartmentId)";

            using (SqlCommand command = new SqlCommand(query, SqlConn))
            {
                SqlConn.Open();

                // Add parameters to the SQL command
                command.Parameters.AddWithValue("@AssetTypeId", assetTypeId);
                command.Parameters.AddWithValue("@DepartmentID", departmentId);
                command.Parameters.AddWithValue("@PublicID", publicId);
                command.Parameters.AddWithValue("@SerialNumber", serialNumber);
                
                command.ExecuteNonQuery();
                
                SqlConn.Close();
            }
        }

        #endregion
    }
}
